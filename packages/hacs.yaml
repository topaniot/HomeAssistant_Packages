# Version: 2024.06.1
# HACS package
# Notify when there are HACS updates pending.
#
# To change the delay of updates notifications create a input number helper named: "𐃏 Delay Notifiy Updates"
# and set the number of hours to wait until send the notification
#
# To change the notification service create an input text helper named: "𐃏 Notify Service Updates"
# and put inside the name of the service you want. 

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'hacs.yaml' %}
            {{ url + account + path + name }}

input_boolean:
  updates_available_alert_hacs:
    name: "𐃏 Updates Available Alert HACS"
    icon: "hass:alert-circle"

automation:
  # Notify when updates are available
  - id: "updates_available_hacs"
    alias: "𐃏 Updates Available HACS"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.hacs
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.hacs
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hacs
                above: '0'
                below: '2'
            sequence:
              - delay: 
                  hours: >-
                    {% if states.input_number.delay_notify_updates.state is defined %}
                      {% set hours = states('input_number.delay_notify_updates') | int %}
                    {% else %}
                      {% set hours = 120 %}
                    {% endif %}
                    {{ hours }}
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.updates_available_alert_hacs
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                    {% set notify_service = states('input_text.notify_service_updates') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚙️ Este o actualizare HACS disponibilă!
                  data:
                    disable_notification: True
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hacs
                above: '1'
            sequence:
              - delay: 
                  hours: >-
                    {% if states.input_number.delay_notify_updates.state is defined %}
                      {% set hours = states('input_number.delay_notify_updates') | int %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set hours = 120 %}
                    {% endif %}
                    {{ hours }}
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.updates_available_alert_hacs
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                    {% set notify_service = states('input_text.notify_service_updates') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚙️ Sunt {{ states('sensor.hacs') }} actualizari HACS disponibile!
                  data:
                    disable_notification: True
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hacs
                below: '1'
              - condition: state
                entity_id: input_boolean.updates_available_alert_hacs
                state: 'on'
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                    {% set notify_service = states('input_text.notify_service_updates') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "🎉 HACS este actualizat!"
                  data:
                    disable_notification: True
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.updates_available_alert_hacs
        default: []
